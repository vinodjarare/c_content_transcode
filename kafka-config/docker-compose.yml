version: '3.8'

services:
  # Redis service - Used by BullMQ for job queue management
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes  # Enable data persistence
    restart: unless-stopped
    networks:
      - transcoder_network

  # Kafka service - Used for message broker functionality
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      # Kafka KRaft mode configuration (no ZooKeeper)
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    ports:
      - "9092:9092"
    volumes:
      - ./kafka_data:/bitnami/kafka
    restart: unless-stopped
    networks:
      - transcoder_network

  # Optional: Kafka UI for monitoring topics and messages
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - transcoder_network

  # Optional: Redis Commander for Redis monitoring
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    depends_on:
      - redis
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - transcoder_network

  # Service for transcoding videos
  # transcoder:
  #   build:
  #     context: ..
  #     dockerfile: Dockerfile
  #   container_name: transcoder
  #   depends_on:
  #     - redis
  #     - kafka
  #   ports:
  #     - "3000:3000"  # Expose the service on port 3000
  #   environment:
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     REDIS_PASSWORD: password
  #     REDIS_TLS: false
  #     KAFKA_BROKER: kafka:9092
  #     KAFKAJS_NO_PARTITIONER_WARNING: 1

  #   volumes:
  #     - ./uploads:/usr/src/app/uploads

  #   networks:
  #     - transcoder_network

volumes:
  redis_data:
  kafka_data:

networks:
  transcoder_network:
    driver: bridge